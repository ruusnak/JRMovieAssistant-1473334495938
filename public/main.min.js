/* Copyright IBM Corp. 2015
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function () {
  'use strict';
  /**
   * Watson Theaters Dialog angular application.
   */
  angular.module('app', [
    'gettext',
    'ngRoute',
    'templates',
    'ngAnimate',
    'dialog'
  ])
    .config(["$routeProvider", function ($routeProvider) {
      $routeProvider.otherwise({ 'redirectTo': '/' });
    }])
    .run(["$rootScope", "gettextCatalog", function ($rootScope, gettextCatalog) {
      gettextCatalog.debug = true;
    }]);
}());

angular.module("templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("modules/dialog-entries.html","<!----------------------------------------------------------------------------\n   Copyright IBM Corp. 2015\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n------------------------------------------------------------------------------>\n<section class=\"dialog-response dialog-response-type-{{dialogCtrl.responseType}}\">\n    <div id=\"dialog-cell\" class=\"dialog-conversation-cell\">\n        <div id=\"conversationParent\" class=\"dialog-entries col-xs-12\">\n            <!-- Welcome message, received from initChat call -->\n            <!--\n               Updated UI design called for omitting the intro text from the WDS system \n            <div class=\"dialog-entry row\">\n                <div class=\"dialog-watson-row\">\n                    <div class=\"dialog-segment-bkg\">\n                        <span class=\"dialog-row-text\" ng-bind-html=\"dialogCtrl.initialChat\"></span>\n                    </div>\n                </div>\n            </div> -->\n            <!-- Actual conversation between user and system -->\n            <div ng-animate-children class=\"dialog-entry row\" ng-repeat=\"entry in dialogCtrl.conversation\">\n                <!--Display user entered text -->\n                <div ng-if=\"entry.message\" class=\"dialog-user-row\">\n                    <div class=\"dialog-segment-bkg\">\n                        <span class=\"dialog-row-text\">{{entry.message}}</span> \n                    </div>\n                </div><hr class=\"dialog-line-separator\">\n                  \n                <!-- \n                Display watson response using directive. The directive takes care of adding\n                animation while the server is responding, and removing animation once response\n                is received\n                -->\n                <div ng-class=\"!entry.responses ? \'watson-thinking\' : \'no-class\'\">\n                    <div class=\"dialog-watson-row\" ng-if=\"entry != null && entry.responses != null\">\n                        <div class=\"dialog-segment-bkg\">\n                            <span class=\"dialog-row-text\" ng-bind-html=\"entry.responses \"></span>\n                        </div>\n                    </div><hr class=\"dialog-line-separator\">\n                </div>\n                \n                <div ng-if=\"entry.options\" style=\"padding-right: 0px;padding-top: 40px;\" class=\"dialog-user-row dialog-white-bg\">\n                    <div class=\"dialog-segment-bkg dialog-white-bg\">\n                        <!-- use the compile directive to convert text to HTML, add as child of current element -->\n                        <span style=\"padding-right: 0px;\" class=\"dialog-row-text\" compile=\"entry.options\"></span>\n                    </div>\n                </div>\n                <!-- if movies are returned, display them after the Watson response -->\n                <div ng-if=\"entry.movies\" class=\"dialog-movie-links-parent\">\n                    <a movie class=\"dialog-movie\" content=\"movie\" ng-repeat=\"movie in entry.movies\" tabindex=\"1\" ng-keypress=\"keypressed($event)\"></a>\n                </div>\n            </div>\n            <!-- If Watson makes a comment on the selected movie, show it here -->\n            <!-- This div must be outside the repeat as we only want to add it to the last conversation segment -->\n            <div ng-if=\"dialogCtrl.selectedMovie && dialogCtrl.selectedMovie.commentary\" class=\"dialog-entry row\">\n                <div class=\"dialog-watson-row\">\n                    <div class=\"dialog-segment-bkg\">\n                        <span class=\"dialog-row-text\" ng-bind-html=\"dialogCtrl.selectedMovie.commentary\"></span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>\n");
$templateCache.put("modules/dialog-full-screen-favorites.html","<!----------------------------------------------------------------------------\n   Copyright IBM Corp. 2015\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n------------------------------------------------------------------------------>\n<div class=\"dialog-fullscreen-favorites-list\">\n    <!-- Button to hide favorites -->\n    <div class=\"dialog-fullscreen-header\">\n        <div class=\"dialog-favorite-close\" ng-click=\"dialogCtrl.toggleFavoritesPanel()\"></div>\n        <!-- Heart icon -->\n        <favorite-indicator class=\"dialog-favorite-indicator\"></favorite-indicator>\n    </div>\n\n    <!-- Scrollable parent -->\n    <div class=\"dialog-fullscreen-favorite-scroll\">\n      <!-- Repeat the following for each favorite -->\n      <div style=\"background-image: url(\'{{favorite.poster_path}}\');{{favorite.poster_path.search(\'jpg\')?\'\':\'background:#323232\'}}\" \n            class=\"dialog-favorite-full-screen-image\" \n            ng-if=\"dialogCtrl.getFavorites().length > 0\"\n            ng-repeat=\"favorite in dialogCtrl.getFavorites()\"\n            ng-click=\"showPreview(favorite)\"\n            favorite-options>\n            <!-- Add a button to unfavorite the movie-->\n            <span class=\"dialog-full-screen-overlay\">\n               <img class=\"dialog-fav-del\" ng-click=\"dialogCtrl.toggleFavorite(favorite)\" src=\"./images/Unfavorite.svg\">\n            </span>\n            <div style=\"position:absolute;\" ng-if=\"!(favorite.poster_path.search(\'jpg\'))\">\n                <p class=\"dialog-favorite-left-movie-poster\" >{{favorite.movie_name}} </p>\n            </div>\n      </div>\n    </div>\n</div>");
$templateCache.put("modules/dialog-sidebar-favorites.html","<!----------------------------------------------------------------------------\n   Copyright IBM Corp. 2015\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n------------------------------------------------------------------------------>\n<div class=\"dialog-favorites-sidebar\">\n    <div ng-show=\"dialogCtrl.getFavorites().length == 0\" class=\"dialog-no-favorites\">\n        <span class=\"dialog-no-favorites-text\">0 Favorites</span>\n    </div>\n    <div style=\"background-image: url(\'{{favorite.poster_path}}\');{{favorite.poster_path.search(\'html\')?\'\':\'background:#323232\'}}\" \n          class=\"dialog-favorite-image\" \n          ng-if=\"dialogCtrl.getFavorites().length > 0\"\n          ng-click=\"dialogCtrl.selectMovie(favorite)\"\n          ng-repeat=\"favorite in dialogCtrl.getFavorites()\" >\n           <span class=\"dialog-unfavorite-overlay\">\n              <img class=\"dialog-fav-del\" ng-click=\"dialogCtrl.toggleFavorite(favorite)\" src=\"./images/Unfavorite.svg\">\n           </span>\n          <div style=\"position:absolute;\" ng-if=\"!(favorite.poster_path.search(\'html\'))\">\n              <p class=\"dialog-favorite-left-movie-poster\" >{{favorite.movie_name}} </p>\n         </div>\n    </div>\n</div>");
$templateCache.put("modules/dialog.html","<!----------------------------------------------------------------------------\n   Copyright IBM Corp. 2015\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n------------------------------------------------------------------------------>\n\n<section class=\"dialog-body-{{dialogCtrl.state.class}}\">\n    <!-- App header, fixed position, fixed size -->\n    <header id=\"dialog-header\" class=\"dialog-header-{{dialogCtrl.state.class}} navbar navbar-fixed-top\">\n        <div class=\"dialog-header-inner\">\n            <favorite-indicator class=\"{{favoriteIndicatorClass}}\">\n                <div class=\"dialog-toggle-favorites-view\"\n                     ng-click=\"dialogCtrl.toggleFavoritesPanel()\"\n                     style=\"{{(dialogCtrl.getFavorites() != null && dialogCtrl.getFavorites().length > 0) ? \'cursor: pointer\' : \'\'}}\">\n                </div>\n            </favorite-indicator>\n            <div class=\"dialog-navbar-txt-img\" onclick=\"location.reload();\">\n                <div class=\"dialog-navbar-img\"></div>\n            </div>\n        </div>\n    </header>\n    <!-- The area where the conversation is displayed. This is the scrollable div as opposed to the body-->\n    <div class=\"dialog-scrollable-div\" id=\"scrollable-div\" ng-if=\"dialogCtrl.state.key !== \'intro\'\" resize>\n        <div class=\"container dialog-container-{{dialogCtrl.state.class}}\">\n            <!--Include the conversation html. Conversation dom will be updated by additions\n                to the \'conversation\' array which is stored in the controller-->\n            <div class=\"dialog-center dialog-center-{{dialogCtrl.state.class}}\" ng-include=\"\'modules/dialog-entries.html\'\"></div>\n        </div>\n    </div>\n    <!--Preview control-->\n    <div id=\"preview-parent\" class=\"dialog-preview-parent\"\n            ng-if=\"dialogCtrl.getCurrentMovie() && dialogCtrl.getCurrentMovie().movie_name != null\">\n        <preview class=\"dialog-preview\" content=\"dialogCtrl.selectedMovie\"></preview>\n    </div>\n    <!--mobile favorites -->\n    <div class=\"dialog-full-screen-favorites\"\n            ng-if=\"dialogCtrl.state.key != \'intro\' && dialogCtrl.showFavorites && (dialogCtrl.getFavorites() != null && dialogCtrl.getFavorites().length > 0)\"\n            ng-include=\"\'modules/dialog-full-screen-favorites.html\'\">\n\n    </div>\n\n    <!--desktop favorites-->\n    <div class=\"dialog-favorites-sidebar-parent\"\n            ng-if=\"dialogCtrl.state.key != \'intro\'\"\n            ng-include=\"\'modules/dialog-sidebar-favorites.html\'\"></div>\n\n    <!--footer, user entry field -->\n    <footer class=\"footer-{{dialogCtrl.state.class}}\" id=\"dialog-footer\">\n        <div class=\"container\">\n            <form class=\"form\" role=\"form\" ng-submit=\"dialogCtrl.submit()\">\n                <div class=\"form-group has-controls dialog-form-group-{{dialogCtrl.state.class}}\">\n                    <!--At low resolutions we want to show the placeholder text in a label field as the input\n                        control is too narrow to display the full message -->\n                    <div class=\"dialog-happy-text-{{dialogCtrl.state.class}}\">\n                                        {{dialogCtrl.state.introText}}\n\n                    </div>\n                    <table class=\"dialog-input-table\">\n                        <tr>\n                            <td class=\"dialog-input-col\">\n                                <input id=\"question\" class=\"dialog-form-input form-control\"\n                                        type=\"text\"\n                                        placeholder=\"{{dialogCtrl.state.placeholder}}\"\n                                        ng-model=\"dialogCtrl.question\" autocorrect=\"off\"\n                                        autocomplete=\"off\"\n                                        disabled/>\n                            </td>\n                            <td class=\"dialog-resize-col\" id=\"resize-footer-col\">\n                                  <!--test-->\n                            </td>\n                        </tr>\n                    </table>\n                </div>\n            </form>\n        </div>\n    </footer>\n    <div class=\"dialog-links-parent dialog-links-parent-{{dialogCtrl.state.class}}\">\n    <a class=\"dialog-link\" href=\"./tos/index.html\">Terms &amp; Conditions</a>\n    |\n    <a class=\"dialog-link\" href=\"http://www.ibm.com/privacy/us/en/\">Privacy</a>\n    |\n    <a class=\"dialog-link\" href=\"http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/\">Built with IBM Watson</a>\n    |\n    <a class=\"dialog-link\" href=\"https://github.com/watson-developer-cloud/conversational-agent-application-starter-kit\">Fork on GitHub</a>\n    </div>\n</section>\n");
$templateCache.put("modules/home.html","<!----------------------------------------------------------------------------\n   Copyright IBM Corp. 2015\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n------------------------------------------------------------------------------>\n\n<div class=\"dialog-body-{{dialogCtrl.state.class}}\">\n    <div class=\"dialog-iheader\"></div>\n    <div class=\"dialog-welcome\">Chat with Watson to discover new and upcoming movies by genre and rating.</div>\n        <a ng-click=\"dialogCtrl.switchToChatting()\" class=\"dialog-nextbtn\" href=\"\"></a>\n    <div class=\"dialog-ifooter\">\n        <div class=\"dialog-links-parent dialog-links-parent-intro\">\n            <a class=\"dialog-link\" href=\"./tos/index.html\">Terms &amp; Conditions</a> | <a class=\"dialog-link\"\n                href=\"http://www.ibm.com/privacy/us/en/\"\n            >Privacy</a> | <a class=\"dialog-link\" href=\"http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/\">Built with IBM Watson</a>\n            |\n            <a class=\"dialog-link\" href=\"https://github.com/watson-developer-cloud/conversational-agent-application-starter-kit\">Fork on GitHub</a>\n\n        </div>\n    </div>\n</div>\n");}]);

/* Copyright IBM Corp. 2015
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 (function () {
  'use strict';

  angular.module('dialog', [
    'templates',
    'dialog.service',
    'dialog.controller',
    'dialog.resize',
    'dialog.movie',
    'dialog.compile',
    'dialog.favorite',
    'dialog.rating',
    'dialog.preview',
    'dialog.parser',
    'dialog.showtoggle',
    'ngAnimate'
  ]);
}());

/* Copyright IBM Corp. 2015
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
(function () {
    'use strict';

    angular.module('dialog.service', [])

    /**
     * @name dialogService
     * @module dialog/service
     * @description
     *
     * Implements the dialogService interface using the Watson Theaters App API to interface with the
     * Watson Dialog Service (WDS) and themoviedb.org's movie API.
     */
    .service('dialogService', ["_", "$http", "$q", "dialogParser", function (_, $http, $q, dialogParser) {
        var clientId;
        var conversationId;
        var welcomeMessage;
        var index = 0;
        var conversation = [];

        /**
         * Gets all entries (responses) in the conversation so far.
         *
         * @public
         * @return {object[]} All entries in the conversation.
         */
        var getConversation = function () {
            return conversation;
        };
        /**
         * A shorthand for retrieving the latest entry in the conversation.
         *
         * @return {object} The latest entry in the conversation.
         */
        var getLatestResponse = function () {
            return conversation.length > 0 ? conversation[conversation.length - 1] : undefined;
        };

        /**
         * Retrieves a clientId for the API connection.
         *
         * @public
         * @return {Object} The current client id and welcome message if it exists,
         * otherwise a new one retrieved from the API.
         */
        var initChat = function () {
           var firstTimeUser = true;
            if (clientId) {
                // Reuse existing clientId
                return $q.when({
                    'clientId': clientId,
                    'welcomeMessage': welcomeMessage,
                    'conversationId': conversationId
                });
            }
            else {
                 if (typeof (Storage) !== 'undefined') {
                     // Store session
                     if (localStorage.getItem('firstTimeUser')) {
                         firstTimeUser = false;
                     }
                 }
                 return $http.post('../api/create_conversation?first_time='+ firstTimeUser )
                  .then(function (response) {
                     if (typeof (Storage) !== 'undefined') {
                         //User session has been initialized, nest time true we want to
                         //notify the system that this is not the user's first session.
                         localStorage.setItem('firstTimeUser', 'false');
                     }
                     clientId = response.data.client_id;
                     welcomeMessage = response.data.response.join(' ');
                     conversationId = response.data.conversation_id;
                     return {
                         'clientId': clientId,
                         'welcomeMessage': welcomeMessage,
                         'conversationId': conversationId
                     };
                 }, function (errorResponse) {
                     var data = errorResponse;
                     if (errorResponse) {
                         data = data.data;
                         return {
                             'clientId': null,
                             'welcomeMessage': data.data.error,
                             'conversationId': null
                         };
                    }
                });
            }
        };

        /**
         * Calls the WDS getResponse API. Given a question/input from the
         * user a call is made to the API. The response
         * is parsed appropriately. e.g. movies parsed from payload etc
         *
         * @private
         * @return {object} A JSON object representing a segment in the conversation.
         */
         var getResponse = function (question) {
             return $http.post('/api/conversation', {
               client_id: clientId,
               conversation_id: conversationId,
               input: question
             }).then(function (response) {
                 var watsonResponse = response.data.response.join(' ');
                 var movies = null, htmlLinks = null, transformedPayload = null;
                 var segment = null;
                 if (watsonResponse) {
                     if (!dialogParser.isMctInPayload(watsonResponse)) {
                         //For 'mct' tags we have to maintain the formatting.
                         watsonResponse = watsonResponse.replace(/<br>/g, '');
                     }
                     //yes, seems odd, but we are compensating for some
                     //inconsistencies in the API and how it handles new lines
                     watsonResponse = watsonResponse.replace(/\n+/g, '<br/>');
                 }
                 if ($.isArray(response.data.movies)) {
                     movies = response.data.movies;
                 }
                 if (!watsonResponse) {
                     //Unlikely, but hardcoding these values in case the dialog service/account does
                     //not provide a response with the list of movies.
                     if (movies) {
                         watsonResponse = 'Here is what I found';
                     }
                     else {
                         watsonResponse = 'Oops, this is embarrassing but my system seems '+
                         'to be having trouble at the moment, please try a bit later.';
                     }
                 }
                 if (dialogParser.isMctInPayload(watsonResponse)) {
                     transformedPayload = dialogParser.parse(watsonResponse);
                     htmlLinks = transformedPayload.htmlOptions;
                     question = transformedPayload.question;
                     watsonResponse = transformedPayload.watsonResponse;
                 }
                 segment = {
                         'message': question,
                         'responses': watsonResponse,
                         'movies': movies,
                         'options': htmlLinks
                     };
                 return segment;
             }, function (error) {
                 //Error case!
                 var response = error.data.error;
                 if (!response) {
                     response = 'Failed to get valid response from the Dialog service. Please refresh your browser';
                 }
                 return {
                     'message': question,
                     'responses': response
                 };
             });
         };

        /**
         * A (public) utility method that ensures initChat is
         * called and returns before calling the getResponse API.
         *
         * @public
         * @return {object[]} An array of chat segments.
         */
        var query = function (input) {
            conversation.push({
                'message': input,
                'index': index++
            });

            return initChat().then(function () {
                var response = $q.when();
                response = response.then(function (res) {
                    if (res) {
                        conversation.push(res);
                    }
                    return getResponse(input);
                });
                return response;
            }, function () {
                var segment = {};
                segment.responses = 'Error received from backend system. Please refresh the browser to start again.';
                conversation.push(segment);
            }).then(function (lastRes) {
                if (lastRes) {
                    conversation.forEach(function (segment) {
                        if (segment.index === index - 1) {
                            segment.responses = lastRes.responses;
                            segment.movies = lastRes.movies;
                            segment.options = lastRes.options;
                        }
                    });
                }
                return conversation;
            });
        };
        /**
         * Called when the end user clicks on a movie. A REST call is initiated to the app server code which
         * acts as a proxy to WDS and themoviedb.
         *
         * @private
         */
         var getMovieInfo = function (movie_name, id, popularity) {
             return initChat().then(function (res) {
               return $http({
                 url: '../api/movies',
                 method: 'GET',
                 params: {
                   client_id: res.clientId,
                   conversation_id: res.conversationId,
                   movie_title: movie_name,
                   movie_id: id
                 }
               }).then(function (response) {
                 var segment = response.data;
                 if (segment) {
                     if (segment.movies && segment.movies.length > 0) {
                         segment = segment.movies[0];
                     }
                     segment.commentary = response.data.response[1];
                 }
                 return segment;
                 },
                 function (error) {
                     var segment = error.data;
                     if (segment) {
                         if (segment.error) {
                             segment.commentary = segment.error;
                         }
                         else {
                             segment.commentary = 'Failed to retrieve movie details. Please retry later.';
                         }
                     }
                     segment.error = true;
                     return segment;
                 });
             });
         };

        return {
            'getConversation': getConversation,
            'getLatestResponse': getLatestResponse,
            'initChat': initChat,
            'query': query,
            'getMovieInfo': getMovieInfo
        };
    }]);
}());

/* Copyright IBM Corp. 2015
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
(function () {
    'use strict';

    angular.module('dialog.preview', [])

    /**
     * @name preview
     * @module module/preview
     * @description
     *
     * Renders the preview panel within the UI. When a movie is clicked within the list
     * of movie results the controller's "selectedMovie" property is updated. Once selectedMovie
     * contains a movie this directive is invoked. This directive is responsible for rendering
     * the entire preview pane (movie, name, description etc.).
     *
     * @param {object}
     *            content - a reference to movie object
     */
    .directive('preview', ["$parse", "$sce", function ($parse, $sce) {
        return {
            'template': '<div><span class="dialog-drawer-toggle"></span>' +
                        '<favorite class="dialog-favorite-sm" content="{{movie}}"></favorite>' +
                        '<div class="dialog-preview-scroll">' +
                        '<iframe id="trailerIFrame" class="dialog-trailer" src="{{trustedUrl}}" allowfullscreen frameborder="0"></iframe>' +
                        '<h3 id="noTrailerText" class="dialog-trailer-missing dialog-trailer-hidden">No Preview Available</h3>' +
                        '<div class="dialog-movie-info-spacing"><div class="dialog-movie-name-rating-spacing"></div><span class="dialog-movie-name-rating"><h3 class="dialog-movie-name">{{movie.movie_name}}</h3>' +
                        '<span class="dialog-rating-label"><img ng-src="{{certification}}"></span></span>' +
                        '<favorite class="dialog-favorite-lg" content="{{movie}}"></favorite>' +
                        '<h5 class="dialog-release-label" ng-hide="hideReleaseDate">Release date:<span class="dialog-release-date"> {{movie.localizedDate}}</span></h5>' +
                        '<showtoggle></showtoggle><div class="dialog-rating-spacing"></div><rating></rating></div></div>',
            'restrict': 'E',
            'link': function (scope, element, attr) {
                var closeButton = null;
                var date = null;
                var monthNames = [ 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December' ];
                var resizeContents = function () {
                    var docHeight = $(window).height();
                    var headerHeight = $('#dialog-header').outerHeight(true);
                    var previewParentHeight = $('#preview-parent')[0].scrollHeight;
                    var innerHeaderHeight = $('.dialog-drawer-toggle').outerHeight(true);
                    var previewAvailHeight = 0;
                    if (previewParentHeight === docHeight) {
                        //mobile
                        previewAvailHeight = docHeight - (innerHeaderHeight + 5);
                    }
                    else {
                        //desktop
                        previewAvailHeight = docHeight - (headerHeight + innerHeaderHeight);
                    }
                    if (docHeight < (headerHeight + previewParentHeight)) {
                        //we need to scroll the preview panel
                        $('.dialog-preview-scroll').height(previewAvailHeight);
                    }
                };
                scope.hideReleaseDate = true;
                scope.hideCertification = true;
                scope.playerClass = '';
                scope.isFavorite = false;

                closeButton = $('.dialog-drawer-toggle');
                closeButton.bind('touchstart click', function (e) {
                    scope.$apply(scope.dialogCtrl.clearMovieSelection());
                    $(window).off('resize', resizeContents);
                    e.preventDefault();
                    e.stopPropagation();
                });
                $(window).resize(resizeContents);
                //<iframe width="560" height="315" src="https://www.youtube.com/embed/vCqiNF94yDw?controls=0&amp;showinfo=0" frameborder="0" allowfullscreen></iframe>
                scope.$watch(function () {
                    return scope.dialogCtrl.getCurrentMovie();
                }, function () {
                    var url = null;
                    var movie = $parse(attr.content)(scope);
                    var iframe = $('#trailerIFrame');
                    var div = $('#noTrailerText');
                    //_.assign(scope.movie, movie);
                    scope.movie = movie;
                    if (!movie.trailer_url && !movie.movie_name && !movie.overview) {
                        return;
                    }
                    if (movie.trailer_url) {
                        url = $sce.trustAsResourceUrl(movie.trailer_url);
                        scope.trustedUrl = url;
                        iframe.removeClass('dialog-trailer-hidden');
                        div.addClass('dialog-trailer-hidden');
                    }
                    else {
                        scope.trustedUrl = null;
                        iframe.addClass('dialog-trailer-hidden');
                        div.removeClass('dialog-trailer-hidden');
                    }
                    if (movie.release_date) {
                        date = new Date(movie.release_date);
                        movie.localizedDate = monthNames[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear();
                        scope.hideReleaseDate = false;
                    }
                    else {
                        scope.hideReleaseDate = true;
                    }
                    if (!movie.certification || movie.certification.length === 0) {
                        movie.certification = 'NR';
                        scope.certification = 'images/NR.svg';
                    }
                    else {
                        if (movie.certification === 'R') {
                            scope.certification = 'images/R.svg';
                        }
                        else if (movie.certification === 'G') {
                            scope.certification = 'images/G.svg';
                        }
                        else if (movie.certification === 'PG') {
                            scope.certification = 'images/PG.svg';
                        }
                        else if (movie.certification === 'PG-13') {
                            scope.certification = 'images/PG-13.svg';
                        }
                    }
                    resizeContents();
                }, true);
            }
        };
    }]);
}());

/**
 *
 * IBM Confidential
 * OCO Source Materials
 *
 * (C) Copyright IBM Corp. 2001, 2015
 *
 * The source code for this program is not published or otherwise
 * divested of its trade secrets, irrespective of what has been
 * deposited with the U.S. Copyright Office.
 *
 */
(function () {
  'use strict';

  angular.module('dialog.parser', ['lodash'])

    /**
     * @name DialogParser
     * @module dialog/parser
     * @description
     */
    .factory('dialogParser', function () {
        var mctPattern = new RegExp(/(<mct:[^]*?>)/);

        var isMctInPayload = function (response) {
            return mctPattern.test(response);
        };

        var parseMctLinkTag = function (text) {
            var watsonResponse = null;
            var mctLinks = [];
            var joinWithBrs = false;
            if (mctPattern.test(text)) {
                watsonResponse = text.match(/^(.*?)(<.*?>)*?<mct:link>/)[1]; //set Watson response to be everything up to first mct tag
                text = text.replace(/^(.*?)(<.*?>)/g, '$2').trim();
                mctLinks = text.match(/<mct\:link>([^]*?)<\/mct\:link>/g).map(function (linkContent) {
                    var html = ['<a class="dialog-mct-option" ng-click="dialogCtrl.submitLink(\''];
                    var input = linkContent.match(/<mct\:input>([^]*?)<\/mct\:input>/)[1]; //get the contents of mct:input
                    html.push(input.replace(/<[^>]*>/g, '').replace('"', '\\"').replace('\'', '\\\''));//Set the contents of mct:input as the value we want to submit (escape ' and ")
                    html.push('\')">');
                    linkContent = linkContent.replace(/<mct\:input>([^]*?)<\/mct\:input>/, input); //get rid of mct:input
                    input = linkContent.replace(/<mct\:link>(.*)<\/mct\:link>/, '$1');//append the contents of mct:link to the html link body
                    if (!joinWithBrs) {
                        //should look for a better solution here.. Here it is for now..
                        //If the input contains a <BR> we take it to mean that the items should be separated by BRs
                        //So when we join the items, we add <br> tags
                        joinWithBrs = new RegExp(/<br>/i).test(linkContent);
                    }
                    input = input.replace(/<br>/, '');
                    html.push(input);
                    html.push('</a>');
                    return html.join('');
                });
            }
            return { 'htmlOptions': mctLinks.join(joinWithBrs ? '<br>' : ''), 'watsonResponse': watsonResponse, 'question': null };
      };

      var replaceLinebreaks = function (text) {
          return text.replace(/<br\/>/g, '');
      };

      /**
       * Parses a response received from {@link DialogService#query}.
       *
       * @param {object} response - A response object received from {@link DialogService#query}.
       * @return {string} Markup ready to be rendered in the view.
       */
      var parse = function (response) {
        var text = response;
        var parsed = [text];
        if (!isMctInPayload(text)) {
            parsed = parsed.map(replaceLinebreaks);
        }
        else {
            //If we have mct tags then we want to keep formatting
            parsed = parsed.map(parseMctLinkTag);
        }
        return parsed[0];
      };

      return {
        'parse': parse,
        'isMctInPayload': isMctInPayload
      };
    });
}());

/* Copyright IBM Corp. 2015
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
(function () {
    'use strict';

    angular.module('dialog.resize', [])

    /**
     * @name resize
     * @module module/resize
     * @description
     *
     * Gets invoked to resize the scrollable div within the UI. Each time the page changes
     * size (via browser resize) this directive is invoked to resize the height of the inner
     * scrollable div.
     */
    .directive('resize', ["$timeout", function ($timeout) {
        return {
            'restrict': 'A',
            'link': function (scope, element) {
                var delayTimeout = null;
                var docHeight = null;
                var headerHeight = null;
                var footerHeight = null;
                var proposedHeight = 0;
                delayTimeout = $timeout(function () {
                    docHeight = $(window).height();
                    headerHeight = $('#dialog-header').outerHeight();
                    footerHeight = $('#dialog-footer').outerHeight();
                    proposedHeight = docHeight - (headerHeight + footerHeight + 5);
                    if (element.outerHeight(true) > proposedHeight) {
                        //Added for iOS issues when scrolling!
                        element.css('-webkit-overflow-scrolling', 'scroll');
                        element.height(proposedHeight);
                    }
                }, 250);

                $( window ).resize(function () {
                    if (delayTimeout) {
                        $timeout.cancel(delayTimeout);
                    }
                    delayTimeout = $timeout(function () {
                        docHeight = $(window).height();
                        headerHeight = $('#dialog-header').outerHeight();
                        footerHeight = $('#dialog-footer').outerHeight();
                        proposedHeight = docHeight - (headerHeight + footerHeight + 5);
                        if (element.outerHeight(true) > proposedHeight) {
                            element.css('-webkit-overflow-scrolling', 'touch');
                        }
                        else {
                            element.css('-webkit-overflow-scrolling', 'auto');
                        }
                        element.height(proposedHeight);
                    }, 250);
                });
            }
        };
    }]);
}());

/* Copyright IBM Corp. 2015
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
(function () {
    'use strict';

    angular.module('dialog.compile', [])

    /**
     * @name compile
     * @module modules/compile
     *
     * @description
     *
     * Compiles a string into a HTML DOM Element
     *
     * @param {object}
     *            content - html content in text format
     */
    .directive('compile', ["$parse", "$compile", function ($parse, $compile) {
        return {
            'restrict': 'A',
            'link': function (scope, element, attr) {
                var html = $parse(attr.compile)(scope); //Get the html content
                var newElement = $compile(html)(scope); //create DOM Element
                element.append(newElement); //append to DOM
            }
        };
    }]);
}());

/* Copyright IBM Corp. 2015
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
(function () {
    'use strict';

    angular.module('dialog.movie', ['ngAnimate'])

    /**
     * @name movie
     * @module modules/movie
     *
     * @description
     *
     * Renders a movie within the UI. The WDS API will notify the movieapp
     * server side code to get a list of movies from themoviedb.org. At this point
     * a list of movies will be returned and a <movie> element added for each movie.
     * The movie is a clickable element which causes the preview panel to load.
     *
     * @param {object}
     *            content - a reference to the movie object the element represents.
     */
    .directive('movie', ["$parse", "$timeout", function ($parse, $timeout) {
        return {
            'restrict': 'A',
            'link': function (scope, element, attr) {
                var movie = $parse(attr.content)(scope); //Get the 'movie' object from the content attribute
                var htmlContent = '<span class="dialog-movie-link">' + movie.movie_name + '</span>';
                var startY = -1;
                var delayTimeout = null;
                var clickAction = function (e) {
                    //Once the movie 'button' is clicked, notify the controller
                    //that a new movie must be selected.
                    scope.dialogCtrl.selectMovie(movie);
                    e.preventDefault();
                    e.stopPropagation();
                };
                scope.keypressed = function ($event) {
                    if ($event.keyCode === 13 || $event.keyCode === 32) {
                        clickAction($event);
                    }
                };
                element.append(htmlContent);
                $('.watson-thinking').last().find('.dialog-line-separator').css('display', 'none');
                element.bind('touchstart', function (e) {
                    var touchobj = null;
                    if (e && e.originalEvent) {
                        touchobj = e.originalEvent.changedTouches[0]; // reference first touch point (ie: first finger)
                        startY = parseInt(touchobj.pageY);
                    }
                });
                element.bind('touchend', function (e) {
                    var touchobj = null;
                    var tmp = null;
                    if (e && e.originalEvent) {
                        touchobj = e.originalEvent.changedTouches[0];
                        tmp = parseInt(touchobj.pageY);
                        if (startY + 20 >= tmp && startY - 20 <= tmp) {
                            clickAction(e);
                        }
                    }
                    startY = -1;
                });
                element.bind('click', clickAction);
                //If it is a mobile UI or a low res UI then put focus on the first returned movie
                if ($(window).height() <= 750 && $.isArray(scope.dialogCtrl.conversation) && scope.dialogCtrl.conversation[scope.dialogCtrl.conversation.length - 1]) {
                    if (scope.dialogCtrl.conversation[scope.dialogCtrl.conversation.length - 1].movies) {
                        if ($.isArray(scope.dialogCtrl.conversation[scope.dialogCtrl.conversation.length - 1].movies)) {
                            if (movie === scope.dialogCtrl.conversation[scope.dialogCtrl.conversation.length - 1].movies[0]) {
                                if (delayTimeout) {
                                    $timeout.cancel(delayTimeout);
                                }
                                //allow the dom element time to render
                                delayTimeout = $timeout(function () {
                                    //forcing focus on the first movie so that the keyboard does not pop up!
                                    element.focus();
                                }, 900);
                            }
                        }
                    }
                }
            }
        };
    }]);
}());

/* Copyright IBM Corp. 2015
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
(function () {
    'use strict';

    angular.module('dialog.rating', [])

    /**
     * @name rating
     * @module dialog/rating
     * @description
     *
     * Provides rating directive relating to the review of movies.
     * The directives are used within the preview panel.
     */
    .directive('rating', function () {
        /*
         * @name favorite
         *
         * @description
         *
         * A 'rating' element directive which provides a 'star' icon that the
         * end user can see to know a rating of a movie.
         * The directive calls the DialogCtrl module to get the current movie
         * and uses popularity property to display right number of stars for the selected movie.
         */
        return {
            'restrict': 'E',
            'template': '<span class="mreview"><span class="dialog-movie-review">themoviedb.org: </span><span class="dialog-review-value">{{Math.round((movie.popularity)*10)/10}}/10</span><p class="dialog-review-star-rating"><span id="rating"></span></p></span></span>',
            'link': function (scope, element) {
                scope.$watch(function () {
                    return scope.dialogCtrl.selectedMovie;
                }, function () {
                    var num = 0, rval = 0, fullstar = 0, halfstar = 0, emptystar = 0, count = 10, i = 0, stars = '';
                    var fs = '<img class="dialog-review-star" src="images/Full_star.svg">';
                    var es = '<img class="dialog-review-star" src="images/Empty_star.svg">';
                    var hs = '<img class="dialog-review-star" src="images/Half_star.svg">';
                    if (scope.dialogCtrl.selectedMovie.popularity > 0) {
                        num = parseFloat(scope.dialogCtrl.selectedMovie.popularity);
                        rval = Math.round(num * 2) / 2;
                        fullstar = parseInt(rval.toString().split('.')[0]);
                        halfstar = (rval.toString().split('.')[1] === undefined) ? 0 : 1;
                        emptystar = count - (fullstar + halfstar);
                        scope.Math = Math;
                        for (i = 0;i < fullstar;i++) {
                            stars += fs + ' ';
                        }
                        for (i = 0;i < halfstar;i++) {
                            stars += hs + ' ';
                        }
                        for (i = 0;i < emptystar;i++) {
                            stars += es + ' ';
                        }
                        $('#rating').html(stars);
                        $('.mreview').css('display', 'block');
                   }
                    else {
                        $('.mreview').css('display', 'none');
                    }
                }, true);
            }
        };
    });
}());

/* Copyright IBM Corp. 2015
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
(function () {
    'use strict';

    angular.module('dialog.showtoggle', [])

    /**
     * @name showtoggle
     * @module dialog/showtoggle
     * @description
     *
     * Provides showtoggle directive relating to the overview of movies.
     * The directives are used within the preview panel.
     */
    .directive('showtoggle', [ '$compile', function ($compile) {
        /*
         * @name showtoggle
         *
         * @description
         *
         * A 'showtoggle' element directive provides a more/less toggle when overview text is beyond a
         * certain character limit which is specified.
         * The directive calls the DialogCtrl module to get the current movie
         * and uses overview property to display movie overview for the selected movie.
         */
        return {
            'restrict': 'E',
            'link': function (scope, element) {
                scope.collapsed = false;
                scope.toggleshow = function () {
                    scope.collapsed = !scope.collapsed;
                };
                scope.$watch(function () {
                    return scope.dialogCtrl.selectedMovie;
                }, function () {
                    var firstPart = null, secondPart = null, toggleButton = null;
                    var text = scope.dialogCtrl.selectedMovie.overview;
                    var maxLength = 150;
                    if (text.length > maxLength) {
                        firstPart = text.substring(0, maxLength);
                        secondPart = text.substring(maxLength, text.length);
                        // First part, Toggle part & Second part
                        firstPart = $compile('<span class="dialog-movie-overview">' + firstPart + '</span>')(scope);
                        secondPart = $compile('<span class="dialog-movie-overview" ng-if="collapsed">' + secondPart + '</span><span>{{!collapsed ? " ..." : ""}}</span>')(scope);
                        toggleButton = $compile('<span class="dialog-collapse-text-toggle" ng-click="toggleshow()">{{collapsed ? "[show less]" : "[show more]"}}</span>')(scope);
                        // remove existing and append the new elements
                        element.empty();
                        element.append(firstPart);
                        element.append(secondPart);
                        element.append(toggleButton);
                    }
                    else {
                        element.empty();
                        element.append('<span class="dialog-movie-overview">' + text + '</span>');
                    }
                    scope.collapsed = false;
                }, true);
            }
        };
    } ] );
}());

/* Copyright IBM Corp. 2015
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
(function () {
    'use strict';

    angular.module('dialog.favorite', [])

    /**
     * @name favorite
     * @module dialog/favorite
     * @description
     *
     * Provides several directives relating to the favoriting of movies.
     * The directives are used within the preview panel, within the header
     * and also within the favorites sidebar/fullscreen UI.
     */
    .directive('favorite', ["$parse", function ($parse) {
        /*
         * @name favorite
         *
         * @description
         *
         * A 'favorite' element directive which provides a 'heart' button that the
         * end user can use to favorite (like) or unfavorite (unlike) a movie.
         * The directive simply calls the DialogCtrl module to toggle the 'favorite'
         * property on the selected movie.
         */
        return {
            'restrict': 'E',
            'template': '<span ng-click="toggle()" class="{{favoriteClass}}"></span>',
            'link': function (scope, element, attr) {
                scope.toggle = function () {
                    var movie = $parse(attr.content)(scope);
                    scope.dialogCtrl.toggleFavorite(movie);
                };

                scope.$watch(function () {
                    return attr.content;
                }, function () {
                    //movie changed
                    var content = $parse(attr.content)(scope);
                    if (!content || !content.favorite) {
                        scope.favoriteClass = 'dialog-no-favorite';
                    }
                    else {
                        scope.favoriteClass = 'dialog-favorite';
                    }
                });

                scope.$watch(function () {
                    return scope.dialogCtrl.getFavorites().length;
                }, function () {
                    //movie changed
                    var content = $parse(attr.content)(scope);
                    if (!content || !content.favorite) {
                        scope.favoriteClass = 'dialog-no-favorite';
                    }
                    else {
                        scope.favoriteClass = 'dialog-favorite';
                    }
                });
            }
        };
    }])
    .directive('favoriteIndicator', function () {
        /*
         * @name favoriteIndicator
         *
         * @description
         *
         * A simple directive which is displayed in the application header.
         * The directive monitors the controller's array of favorites. If one or
         * more favorites exist in the array then the directive changes the class
         * of the DOM element to indicate one or more favorites are selected.
         */
        return {
            'restrict': 'E',
            'link': function (scope) {
                scope.favoriteIndicatorClass = 'dialog-no-favorite-left';
                scope.$watch(function () {
                    return scope.dialogCtrl.getFavorites().length;
                }, function () {
                    var favorites = scope.dialogCtrl.getFavorites();
                    if (!favorites || favorites.length === 0) {
                        scope.favoriteIndicatorClass = 'dialog-no-favorite-left';
                    }
                    else {
                        scope.favoriteIndicatorClass = 'dialog-favorite-left';
                    }
                });
            }
        };
    })
    .directive('favoriteOptions', function () {
        /*
         * @name favoriteOptions
         *
         * @description
         *
         * Used only at small resolutions. This allows users to unfavorite a movie.
         */
        return {
            'restrict': 'A',
            'link': function (scope) {
                scope.showPreview = function (movie) {
                    scope.dialogCtrl.toggleFavoritesPanel();
                    scope.dialogCtrl.selectMovie(movie);
                };
            }
        };
    });
}());

/* Copyright IBM Corp. 2015
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
(function () {
    'use strict';

    /**
     * @name DialogController
     * @module dialog/controller
     * @description
     *
     * Controls the state of the Dialog view. At any given point of time, the Dialog is in one of the following states:
     *
     * - initial  The "home" view displayed to the user when launching dialog
     * - chatting  The view displayed when user is typing a new response/question
     * - preview  The view is showing a movie preview
     * - favorites  When in small resolutions the favorites panel is displayed
     *
     */
    var DialogController = function (_, $rootScope, $scope, $location, $anchorScroll, $timeout, gettextCatalog, dialogService) {
        var self = this;
        var placeholderText = null;
        var states = {
            'intro': {
                'key': 'intro',
                'class': 'intro',
                'placeholder': 'Loading. Please wait...',
                'introText': ''
            },
            'chatting': {
                'key': 'chatting',
                'class': 'chatting',
                'placeholder': 'Start typing...',
                'introText': ''
            },
            'preview': {
                'key': 'preview',
                'class': 'preview',
                'placeholder': 'Start typing...',
                'introText': ''
            },
            'favorites': {
                'key': 'favorites',
                'class': 'favorites',
                'placeholder': 'Start typing...',
                'introText': ''
            }
        };

        var setState = function (state) {
            self.state = _.cloneDeep(state);
        };

        self.favorites = [];
        self.selectedMovies = [];
        self.selectedMovie = {};
        self.showFavorites = false;

        /**
         * Called when a user clicks on a movie within the UI.
         * This util method first checked if the selected
         * movie was previously clicked on. If it was the cached movie
         * details are displayed and a REST call
         * is made to the WDS API to inform it of the current selection.
         * If the movie is not cached (not previously clicked on) a
         * REST call is made to retrieve the movie
         * details and to inform WDS of the current selection.
         * Once the movie details are retrieved
         * they are cached (for the duration of the session) so
         * that further REST calls are not needed
         * in order to populate the preview UI.
         *
         * @public
         */
        self.selectMovie = function (movie) {
            var movie_name = null;
            var movie_id = null;
            var popularity = null;
            var result = null;
            var keys = null;
            var objKeys = null;
            var query = null;
            var scrollable = null;
            if (movie) {
                movie_name = movie.movie_name;
                movie_id = movie.movie_id;
                popularity = movie.popularity;
            }
            else {
                return null;
            }
            result = _.find(self.selectedMovies, { 'movie_id': movie_id, 'movie_name': movie_name });
            if (result) {
                keys = _.keys(self.selectedMovie);
                if (keys) {
                    keys.forEach(function (key) {
                        delete self.selectedMovie[key];
                    });
                }
                _.assign(self.selectedMovie, result);
                //We don't need to wait for a response here, we already have cached info.
                //We are just notifying WDS of the selection.
                dialogService.getMovieInfo(movie_name, movie_id, popularity);
                scrollable = $('#scrollable-div');
                if (scrollable[0]) {
                    scrollable.animate({ 'scrollTop': scrollable[0].scrollHeight }, 1000);
                }
                //Reduce space between chat box and chat messages
                if ( $('#scrollable-div').height() > $('#conversationParent').height() ) {
                    $('.dialog-center').css({ 'top': $('#scrollable-div').height() - $('#conversationParent').height() - 10 + 'px' });
                    setState(states.preview);
                    return result;
                }
                $('.dialog-center').css({ 'top': '0px' });
                setState(states.preview);
                return result;
            }
            else {
                query = dialogService.getMovieInfo(movie_name, movie_id, popularity);
                query.then(function (segment) {
                    if (segment.error === true) {
                        setState(states.chatting);
                    }
                    else {
                        setState(states.preview);
                    }
                    objKeys = _.keys(self.selectedMovie);
                    if (objKeys) {
                        objKeys.forEach(function (objKey) {
                            delete self.selectedMovie[objKey]; //reset selected movie
                        });
                    }
                    _.assign(self.selectedMovie, segment);
                    if (segment.error !== true) {
                        self.selectedMovies.push(segment);
                    }
                    $('#scrollable-div').animate({ 'scrollTop': $('#scrollable-div')[0].scrollHeight }, 1000);
                    //Reduce space between chat box and chat messages
                    if ( $('#scrollable-div').height() > $('#conversationParent').height() ) {
                    $('.dialog-center').css({ 'top': $('#scrollable-div').height() - $('#conversationParent').height() - 10 + 'px' });
                    return self.selectedMovie;
                    }
                    $('.dialog-center').css({ 'top': '0px' });
                    return self.selectedMovie;
                });
            }
        };
        /**
         * Sets the 'selectedMovie' object back to an empty object.
         *
         */
        self.clearMovieSelection = function () {
            var objKeys = _.keys(self.selectedMovie);
            if (objKeys) {
                objKeys.forEach(function (objKey) {
                    delete self.selectedMovie[objKey]; //reset selected movie
                });
            }
            setState(states.chatting);
        };

        /**
         * Returns the list of currently selected favorites.
         *
         * @public
         * @return an array of movies which have been 'favorited' by the end user in the current session.
         */
        self.getFavorites = function () {
            return self.favorites;
        };

        /**
         * Returns the movie currently selected by the user.
         * @public
         * @return {object} The movie selected by the user.
         */
        self.getCurrentMovie = function () {
            return self.selectedMovie;
        };

        /**
         * Adds or removes a movie from the list of favorites. The current array of favorite movies is
         * interrogated for the provided movie (the array is check for a movie with the same name and id).
         * If the movie is not found and the 'add' flag is true the movie is added to the array.
         * If the movie is found and the 'add' flag is false the movie is removed from the list.
         * If the movie is found and the 'add' flag is true or the movie is not found and the 'add' flag
         * is false then no action is taken (as the array is in the correct state).
         *
         * @public
         * @param movie - a object representing a movie which is to be added to the list of favorites.
         *                The object must have a movie_id and movie_name property.
         * @param add - a flag which determines whether the provided movie is to be added or removed to/from
         *              the list of favorites. A value of true signaling the movie is to be added, false to
         *              remove the movie from the array.
         */
        self.setAsFavorite = function (movie, add) {
            var result = _.find(self.selectedMovies, { 'movie_id': movie.movie_id, 'movie_name': movie.movie_name });
            if (result) {
                result.favorite = add;
            }
            if (movie && self.selectedMovie.movie_name === movie.movie_name && self.selectedMovie.movie_id === movie.movie_id) {
                self.selectedMovie.favorite = add;
            }
            if (movie && !add) {
                _.remove(self.favorites, { 'movie_id': movie.movie_id, 'movie_name': movie.movie_name });
                if (self.favorites.length === 0) {
                    self.showFavorites = false;
                }
                return;
            }
            result = _.find(self.favorites, { 'movie_id': movie.movie_id, 'movie_name': movie.movie_name });
            if (!result && add) {
                self.favorites.unshift(_.clone(movie));
            }
        };

        setState(states.intro);
        //gets the conversation array such that it can be tracked for additions
        self.conversation = dialogService.getConversation();
        self.question = null;

        if (!self.placeHolder) {
            //if we haven't received the placeholder, make a call to initChat API to get welcome message
            self.placeHolder = (function () {
                var init = dialogService.initChat();
                return init.then(function (response) {
                    placeholderText = response.welcomeMessage;
                    states.intro.introText = placeholderText.replace(/\n\n/g, ' '); //for placeholder attr use spaces
                    states.intro.placeholder = 'Start typing...';
                    $('#question').removeAttr('disabled');
                    setState(states.intro);
                    $('#question').focus();
                });
            }());
        }

        /**
         * Submits the current question using dialogService
         */
        self.submit = function () {
            var child = null;
            var timeout = null;
            var footer = null;
            if (!self.question || self.question.length === 0) {
                $('#question').focus();
                return;
            }
            if (self.conversation.length > 1 && self.conversation[self.conversation.length - 1].options) {
                self.conversation[self.conversation.length - 1].options = null;
            }
            if (self.selectedMovie) {
                self.selectedMovie.commentary = null;
            }
            $('#question').attr('disabled', '');
            timeout = $timeout(function () {
                    var scrollable = $('#scrollable-div');
                    if (scrollable[0]) {
                        scrollable[0].scrollTop = scrollable[0].scrollHeight;
                    }
                }, 500);

            dialogService.query(self.question, true).then(function (response) {
                $('#question').removeAttr('disabled');
                $('#question').val('');
                if ($.isArray(response)) {
                    response = response[response.length - 1];
                    //If we are displaying movies on a mobile device (less than 750 tall) we do
                    //not want to put focus into the field! (we don't want the keyboard popping up)
                    if (!response.movies || $(window).height() > 750) {
                        $('#question').focus();
                    }
                }
                //This is not a great hack, but the only fix I could find for compensating
                //for the width of the scrollbars. When the scrollbar appears it
                if ($('#scrollable-div').prop('clientHeight') < $('#scrollable-div').prop('scrollHeight')) {
                    child = document.getElementById('resize-footer-col');
                    child.style.display = 'table-cell';
                    footer = document.getElementById('dialog-footer');
                    footer.style.overflowY = 'scroll';
                    if (timeout) {
                        $timeout.cancel(timeout);
                    }
                    timeout = $timeout(function () {
                        var scrollableDiv = $('#scrollable-div');
                        child.style.display = 'none';
                        if (scrollableDiv[0]) {
                            scrollableDiv[0].scrollTop = scrollableDiv[0].scrollHeight;
                        }
                     }, 500);
                }
                else {
                    child = document.getElementById('resize-footer-col');
                    child.style.display = 'table-cell';
                    footer = document.getElementById('dialog-footer');
                    footer.style.overflowY = 'hidden';
                    if (timeout) {
                        $timeout.cancel(timeout);
                    }
                    timeout = $timeout(function () {
                        var scrollableDiv = $('#scrollable-div');
                        child.style.display = 'none';
                        if (scrollableDiv[0]) {
                            scrollableDiv[0].scrollTop = scrollableDiv[0].scrollHeight;
                        }
                    }, 500);
                }
            });
            delete self.question;
        };

        self.toggleFavorite = function (movie) {
            if (movie) {
                if (movie.favorite) {
                    movie.favorite = false;
                    self.setAsFavorite(movie, false);
                }
                else {
                    movie.favorite = true;
                    self.setAsFavorite(movie, true);
                }
            }
        };

        self.toggleFavoritesPanel = function () {
            self.showFavorites = !self.showFavorites;
        };

        self.submitLink = function (textToSubmit) {
            $('#question').val(textToSubmit);
            self.question = textToSubmit;
            self.submit();
        };

        self.switchToChatting = function () {
            $location.path('chatting');
        };

        $scope.$on('$viewContentLoaded', function (next, current) {
            if (placeholderText) {
                $('#question').removeAttr('disabled');
                $('#question').focus();
            }
        });

        //Watch the conversation array.. If a segment is added then update the state
        $scope.$watch(function () {
            return self.conversation;
        }, function () {
            // We have a new response, switch to 'answered' state
            if (!_.isEmpty(self.conversation)) {
                if (self.conversation.length === 1) {
                   states.intro.introText = self.conversation[0].responses;
                    $('body').addClass('dialog-body-running');
                    if (self.state.key !== states.preview.key) {
                        setState(states.chatting);
                    }
                }
            }
        }, true);
    };
    DialogController.$inject = ["_", "$rootScope", "$scope", "$location", "$anchorScroll", "$timeout", "gettextCatalog", "dialogService"];

    angular.module('dialog.controller', [ 'gettext', 'lodash', 'ngRoute', 'ngSanitize', 'ngAnimate', 'dialog.service' ]).config(
            ["$routeProvider", function ($routeProvider) {
                $routeProvider.when('/', {
                    'templateUrl': 'modules/home.html',
                    'reloadOnSearch': false
                }).when('/chatting', {
                    'templateUrl': 'modules/dialog.html',
                    'reloadOnSearch': false
                });
            }]).controller('DialogController', DialogController);
}());
